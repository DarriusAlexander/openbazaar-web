/* default for inputs with no color class */
input:focus,
select:focus,
textarea:focus,
button:focus {
  border-color: #909ebc; }

.clrP {
  background-color: white; }
  .clrP input[type="radio"] + label:before,
  .clrP .fauxRadioBtn {
    background-color: #f0f0f0; }
  .clrP input[type="radio"]:checked + label:before,
  .clrP .fauxRadioBtn.active,
  .clrP .fauxRadioBtn[data-state='selected'] {
    box-shadow: inset 0 0 0 3px #f0f0f0; }

.clrPOverlay {
  background-color: rgba(255, 255, 255, 0.8); }

.clrS {
  background-color: #f0f0f0; }
  .clrS input[type="radio"] + label:before,
  .clrS .fauxRadioBtn {
    background-color: white; }
  .clrS input[type="radio"]:checked + label:before,
  .clrS .fauxRadioBtn.active,
  .clrS .fauxRadioBtn[data-state='selected'] {
    box-shadow: inset 0 0 0 3px white; }

input[type=range][class~="clrP"]::-webkit-slider-runnable-track {
  background-color: #f0f0f0;
  border-color: #dbdbdb; }

input[type=range][class~="clrP"]:focus::-webkit-slider-runnable-track {
  background-color: #f0f0f0; }

input[type=range][class~="clrP"]::-webkit-slider-thumb {
  background-color: white; }

input[type=range][class~="clrS"]::-webkit-slider-runnable-track {
  background-color: white;
  border-color: #dbdbdb; }

input[type=range][class~="clrS"]:focus::-webkit-slider-runnable-track {
  background-color: white; }

input[type=range][class~="clrS"]::-webkit-slider-thumb {
  background-color: #f0f0f0; }

.clrErr {
  background-color: red; }

.clrT {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #3a4660; }
  .clrT a {
    color: #8796b6; }
  .clrT .btn, .clrT .listItem, .clrT.btn, .clrT.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #3a4660; }
  a.clrT {
    color: #3a4660; }
  .clrT input[type="radio"]:checked + label:before,
  .clrT .fauxRadioBtn.active,
  .clrT .fauxRadioBtn[data-state='selected'] {
    background: #3a4660; }
  .clrT input[type="checkbox"] + label:before {
    color: #8796b6; }
  .clrT input[type="checkbox"]:checked + label:before {
    color: #3a4660; }

.clrT2 {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #8796b6; }
  .clrT2 a {
    color: #dde1ea; }
  .clrT2 .btn, .clrT2 .listItem, .clrT2.btn, .clrT2.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #8796b6; }
  a.clrT2 {
    color: #8796b6; }
  .clrT2 input[type="radio"]:checked + label:before,
  .clrT2 .fauxRadioBtn.active,
  .clrT2 .fauxRadioBtn[data-state='selected'] {
    background: #8796b6; }
  .clrT2 input[type="checkbox"] + label:before {
    color: #dde1ea; }
  .clrT2 input[type="checkbox"]:checked + label:before {
    color: #8796b6; }

.clrT3 {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #dde1ea; }
  .clrT3 a {
    color: #dde1ea; }
  .clrT3 .btn, .clrT3 .listItem, .clrT3.btn, .clrT3.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #dde1ea; }
  a.clrT3 {
    color: #dde1ea; }
  .clrT3 input[type="radio"]:checked + label:before,
  .clrT3 .fauxRadioBtn.active,
  .clrT3 .fauxRadioBtn[data-state='selected'] {
    background: #dde1ea; }
  .clrT3 input[type="checkbox"] + label:before {
    color: #dde1ea; }
  .clrT3 input[type="checkbox"]:checked + label:before {
    color: #dde1ea; }

.clrT4 {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #f0f2f6; }
  .clrT4 a {
    color: #f0f2f6; }
  .clrT4 .btn, .clrT4 .listItem, .clrT4.btn, .clrT4.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #f0f2f6; }
  a.clrT4 {
    color: #f0f2f6; }
  .clrT4 input[type="radio"]:checked + label:before,
  .clrT4 .fauxRadioBtn.active,
  .clrT4 .fauxRadioBtn[data-state='selected'] {
    background: #f0f2f6; }
  .clrT4 input[type="checkbox"] + label:before {
    color: #f0f2f6; }
  .clrT4 input[type="checkbox"]:checked + label:before {
    color: #f0f2f6; }

.clrTEm {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #2aae24; }
  .clrTEm a {
    color: #60dd5a; }
  .clrTEm .btn, .clrTEm .listItem, .clrTEm.btn, .clrTEm.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #2aae24; }
  a.clrTEm {
    color: #2aae24; }
  .clrTEm input[type="radio"]:checked + label:before,
  .clrTEm .fauxRadioBtn.active,
  .clrTEm .fauxRadioBtn[data-state='selected'] {
    background: #2aae24; }
  .clrTEm input[type="checkbox"] + label:before {
    color: #60dd5a; }
  .clrTEm input[type="checkbox"]:checked + label:before {
    color: #2aae24; }

.clrTAtt {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #2aae24; }
  .clrTAtt a {
    color: #60dd5a; }
  .clrTAtt .btn, .clrTAtt .listItem, .clrTAtt.btn, .clrTAtt.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #2aae24; }
  a.clrTAtt {
    color: #2aae24; }
  .clrTAtt input[type="radio"]:checked + label:before,
  .clrTAtt .fauxRadioBtn.active,
  .clrTAtt .fauxRadioBtn[data-state='selected'] {
    background: #2aae24; }
  .clrTAtt input[type="checkbox"] + label:before {
    color: #60dd5a; }
  .clrTAtt input[type="checkbox"]:checked + label:before {
    color: #2aae24; }

.clrTErr {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: red; }
  .clrTErr a {
    color: red; }
  .clrTErr .btn, .clrTErr .listItem, .clrTErr.btn, .clrTErr.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: red; }
  a.clrTErr {
    color: red; }
  .clrTErr input[type="radio"]:checked + label:before,
  .clrTErr .fauxRadioBtn.active,
  .clrTErr .fauxRadioBtn[data-state='selected'] {
    background: red; }
  .clrTErr input[type="checkbox"] + label:before {
    color: red; }
  .clrTErr input[type="checkbox"]:checked + label:before {
    color: red; }

.clrTAlert {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #fecf33; }
  .clrTAlert a {
    color: #fecf33; }
  .clrTAlert .btn, .clrTAlert .listItem, .clrTAlert.btn, .clrTAlert.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #fecf33; }
  a.clrTAlert {
    color: #fecf33; }
  .clrTAlert input[type="radio"]:checked + label:before,
  .clrTAlert .fauxRadioBtn.active,
  .clrTAlert .fauxRadioBtn[data-state='selected'] {
    background: #fecf33; }
  .clrTAlert input[type="checkbox"] + label:before {
    color: #fecf33; }
  .clrTAlert input[type="checkbox"]:checked + label:before {
    color: #fecf33; }

.clrTOnEmph {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: white; }
  .clrTOnEmph a {
    color: white; }
  .clrTOnEmph .btn, .clrTOnEmph .listItem, .clrTOnEmph.btn, .clrTOnEmph.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: white; }
  a.clrTOnEmph {
    color: white; }
  .clrTOnEmph input[type="radio"]:checked + label:before,
  .clrTOnEmph .fauxRadioBtn.active,
  .clrTOnEmph .fauxRadioBtn[data-state='selected'] {
    background: white; }
  .clrTOnEmph input[type="checkbox"] + label:before {
    color: white; }
  .clrTOnEmph input[type="checkbox"]:checked + label:before {
    color: white; }

.clrTEmph1 {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #2aae24; }
  .clrTEmph1 a {
    color: #2aae24; }
  .clrTEmph1 .btn, .clrTEmph1 .listItem, .clrTEmph1.btn, .clrTEmph1.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #2aae24; }
  a.clrTEmph1 {
    color: #2aae24; }
  .clrTEmph1 input[type="radio"]:checked + label:before,
  .clrTEmph1 .fauxRadioBtn.active,
  .clrTEmph1 .fauxRadioBtn[data-state='selected'] {
    background: #2aae24; }
  .clrTEmph1 input[type="checkbox"] + label:before {
    color: #2aae24; }
  .clrTEmph1 input[type="checkbox"]:checked + label:before {
    color: #2aae24; }

.clrTEmph1Disabled {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #c8d6c7; }
  .clrTEmph1Disabled a {
    color: #c8d6c7; }
  .clrTEmph1Disabled .btn, .clrTEmph1Disabled .listItem, .clrTEmph1Disabled.btn, .clrTEmph1Disabled.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #c8d6c7; }
  a.clrTEmph1Disabled {
    color: #c8d6c7; }
  .clrTEmph1Disabled input[type="radio"]:checked + label:before,
  .clrTEmph1Disabled .fauxRadioBtn.active,
  .clrTEmph1Disabled .fauxRadioBtn[data-state='selected'] {
    background: #c8d6c7; }
  .clrTEmph1Disabled input[type="checkbox"] + label:before {
    color: #c8d6c7; }
  .clrTEmph1Disabled input[type="checkbox"]:checked + label:before {
    color: #c8d6c7; }

.clrTEmph2 {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #60dd5a; }
  .clrTEmph2 a {
    color: #60dd5a; }
  .clrTEmph2 .btn, .clrTEmph2 .listItem, .clrTEmph2.btn, .clrTEmph2.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #60dd5a; }
  a.clrTEmph2 {
    color: #60dd5a; }
  .clrTEmph2 input[type="radio"]:checked + label:before,
  .clrTEmph2 .fauxRadioBtn.active,
  .clrTEmph2 .fauxRadioBtn[data-state='selected'] {
    background: #60dd5a; }
  .clrTEmph2 input[type="checkbox"] + label:before {
    color: #60dd5a; }
  .clrTEmph2 input[type="checkbox"]:checked + label:before {
    color: #60dd5a; }

.clrTPriceAboveMarket {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: red; }
  .clrTPriceAboveMarket a {
    color: red; }
  .clrTPriceAboveMarket .btn, .clrTPriceAboveMarket .listItem, .clrTPriceAboveMarket.btn, .clrTPriceAboveMarket.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: red; }
  a.clrTPriceAboveMarket {
    color: red; }
  .clrTPriceAboveMarket input[type="radio"]:checked + label:before,
  .clrTPriceAboveMarket .fauxRadioBtn.active,
  .clrTPriceAboveMarket .fauxRadioBtn[data-state='selected'] {
    background: red; }
  .clrTPriceAboveMarket input[type="checkbox"] + label:before {
    color: red; }
  .clrTPriceAboveMarket input[type="checkbox"]:checked + label:before {
    color: red; }

.clrTPriceBelowMarket {
  /* generates the text color rules */
  /* if no second color is passed, set everything to the first color */
  color: #2aae24; }
  .clrTPriceBelowMarket a {
    color: #2aae24; }
  .clrTPriceBelowMarket .btn, .clrTPriceBelowMarket .listItem, .clrTPriceBelowMarket.btn, .clrTPriceBelowMarket.listItem {
    /* btnTxt and iconBtn are included automatically because they extend .btn */
    color: #2aae24; }
  a.clrTPriceBelowMarket {
    color: #2aae24; }
  .clrTPriceBelowMarket input[type="radio"]:checked + label:before,
  .clrTPriceBelowMarket .fauxRadioBtn.active,
  .clrTPriceBelowMarket .fauxRadioBtn[data-state='selected'] {
    background: #2aae24; }
  .clrTPriceBelowMarket input[type="checkbox"] + label:before {
    color: #2aae24; }
  .clrTPriceBelowMarket input[type="checkbox"]:checked + label:before {
    color: #2aae24; }

.clrBr {
  /* generates the border color rules */
  border-color: #dbdbdb; }
  .clrBr:hover, .clrBr:focus {
    border-color: #dbdbdb; }
  .clrBr input:focus:not(.disabled),
  .clrBr select:focus:not(.disabled),
  .clrBr textarea:focus:not(.disabled),
  .clrBr button:focus:not(.disabled) {
    border-color: #909ebc; }
  .clrBr hr {
    border-color: #dbdbdb; }
  .clrBr .btn:hover,
  .clrBr .btn:focus, .clrBr.btn:hover, .clrBr.btn:focus,
  .clrBr .clrHover:hover,
  .clrBr .clrHover:focus, .clrBr.clrHover:hover, .clrBr.clrHover:focus {
    border-color: #909ebc; }
    .disabled .clrBr .btn:hover, .clrBr .btn:hover.disabled, .clrBr .btn:hover:disabled, .disabled
    .clrBr .btn:focus,
    .clrBr .btn:focus.disabled,
    .clrBr .btn:focus:disabled, .disabled .clrBr.btn:hover, .clrBr.btn:hover.disabled, .clrBr.btn:hover:disabled, .disabled .clrBr.btn:focus, .clrBr.btn:focus.disabled, .clrBr.btn:focus:disabled, .disabled
    .clrBr .clrHover:hover,
    .clrBr .clrHover:hover.disabled,
    .clrBr .clrHover:hover:disabled, .disabled
    .clrBr .clrHover:focus,
    .clrBr .clrHover:focus.disabled,
    .clrBr .clrHover:focus:disabled, .disabled .clrBr.clrHover:hover, .clrBr.clrHover:hover.disabled, .clrBr.clrHover:hover:disabled, .disabled .clrBr.clrHover:focus, .clrBr.clrHover:focus.disabled, .clrBr.clrHover:focus:disabled {
      border-color: #dbdbdb; }

.clrBr2 {
  /* generates the border color rules */
  border-color: white; }
  .clrBr2:hover, .clrBr2:focus {
    border-color: white; }
  .clrBr2 input:focus:not(.disabled),
  .clrBr2 select:focus:not(.disabled),
  .clrBr2 textarea:focus:not(.disabled),
  .clrBr2 button:focus:not(.disabled) {
    border-color: #909ebc; }
  .clrBr2 hr {
    border-color: white; }
  .clrBr2 .btn:hover,
  .clrBr2 .btn:focus, .clrBr2.btn:hover, .clrBr2.btn:focus,
  .clrBr2 .clrHover:hover,
  .clrBr2 .clrHover:focus, .clrBr2.clrHover:hover, .clrBr2.clrHover:focus {
    border-color: #909ebc; }
    .disabled .clrBr2 .btn:hover, .clrBr2 .btn:hover.disabled, .clrBr2 .btn:hover:disabled, .disabled
    .clrBr2 .btn:focus,
    .clrBr2 .btn:focus.disabled,
    .clrBr2 .btn:focus:disabled, .disabled .clrBr2.btn:hover, .clrBr2.btn:hover.disabled, .clrBr2.btn:hover:disabled, .disabled .clrBr2.btn:focus, .clrBr2.btn:focus.disabled, .clrBr2.btn:focus:disabled, .disabled
    .clrBr2 .clrHover:hover,
    .clrBr2 .clrHover:hover.disabled,
    .clrBr2 .clrHover:hover:disabled, .disabled
    .clrBr2 .clrHover:focus,
    .clrBr2 .clrHover:focus.disabled,
    .clrBr2 .clrHover:focus:disabled, .disabled .clrBr2.clrHover:hover, .clrBr2.clrHover:hover.disabled, .clrBr2.clrHover:hover:disabled, .disabled .clrBr2.clrHover:focus, .clrBr2.clrHover:focus.disabled, .clrBr2.clrHover:focus:disabled {
      border-color: white; }

.clrBr3 {
  /* generates the border color rules */
  border-color: #909ebc; }
  .clrBr3:hover, .clrBr3:focus {
    border-color: #909ebc; }
  .clrBr3 input:focus:not(.disabled),
  .clrBr3 select:focus:not(.disabled),
  .clrBr3 textarea:focus:not(.disabled),
  .clrBr3 button:focus:not(.disabled) {
    border-color: white; }
  .clrBr3 hr {
    border-color: #909ebc; }
  .clrBr3 .btn:hover,
  .clrBr3 .btn:focus, .clrBr3.btn:hover, .clrBr3.btn:focus,
  .clrBr3 .clrHover:hover,
  .clrBr3 .clrHover:focus, .clrBr3.clrHover:hover, .clrBr3.clrHover:focus {
    border-color: white; }
    .disabled .clrBr3 .btn:hover, .clrBr3 .btn:hover.disabled, .clrBr3 .btn:hover:disabled, .disabled
    .clrBr3 .btn:focus,
    .clrBr3 .btn:focus.disabled,
    .clrBr3 .btn:focus:disabled, .disabled .clrBr3.btn:hover, .clrBr3.btn:hover.disabled, .clrBr3.btn:hover:disabled, .disabled .clrBr3.btn:focus, .clrBr3.btn:focus.disabled, .clrBr3.btn:focus:disabled, .disabled
    .clrBr3 .clrHover:hover,
    .clrBr3 .clrHover:hover.disabled,
    .clrBr3 .clrHover:hover:disabled, .disabled
    .clrBr3 .clrHover:focus,
    .clrBr3 .clrHover:focus.disabled,
    .clrBr3 .clrHover:focus:disabled, .disabled .clrBr3.clrHover:hover, .clrBr3.clrHover:hover.disabled, .clrBr3.clrHover:hover:disabled, .disabled .clrBr3.clrHover:focus, .clrBr3.clrHover:focus.disabled, .clrBr3.clrHover:focus:disabled {
      border-color: #909ebc; }

.clrBr4 {
  /* generates the border color rules */
  border-color: white; }
  .clrBr4:hover, .clrBr4:focus {
    border-color: white; }
  .clrBr4 input:focus:not(.disabled),
  .clrBr4 select:focus:not(.disabled),
  .clrBr4 textarea:focus:not(.disabled),
  .clrBr4 button:focus:not(.disabled) {
    border-color: white; }
  .clrBr4 hr {
    border-color: white; }
  .clrBr4 .btn:hover,
  .clrBr4 .btn:focus, .clrBr4.btn:hover, .clrBr4.btn:focus,
  .clrBr4 .clrHover:hover,
  .clrBr4 .clrHover:focus, .clrBr4.clrHover:hover, .clrBr4.clrHover:focus {
    border-color: white; }
    .disabled .clrBr4 .btn:hover, .clrBr4 .btn:hover.disabled, .clrBr4 .btn:hover:disabled, .disabled
    .clrBr4 .btn:focus,
    .clrBr4 .btn:focus.disabled,
    .clrBr4 .btn:focus:disabled, .disabled .clrBr4.btn:hover, .clrBr4.btn:hover.disabled, .clrBr4.btn:hover:disabled, .disabled .clrBr4.btn:focus, .clrBr4.btn:focus.disabled, .clrBr4.btn:focus:disabled, .disabled
    .clrBr4 .clrHover:hover,
    .clrBr4 .clrHover:hover.disabled,
    .clrBr4 .clrHover:hover:disabled, .disabled
    .clrBr4 .clrHover:focus,
    .clrBr4 .clrHover:focus.disabled,
    .clrBr4 .clrHover:focus:disabled, .disabled .clrBr4.clrHover:hover, .clrBr4.clrHover:hover.disabled, .clrBr4.clrHover:hover:disabled, .disabled .clrBr4.clrHover:focus, .clrBr4.clrHover:focus.disabled, .clrBr4.clrHover:focus:disabled {
      border-color: white; }

.clrBrT {
  /* generates the border color rules */
  border-color: #3a4660; }
  .clrBrT:hover, .clrBrT:focus {
    border-color: #3a4660; }
  .clrBrT input:focus:not(.disabled),
  .clrBrT select:focus:not(.disabled),
  .clrBrT textarea:focus:not(.disabled),
  .clrBrT button:focus:not(.disabled) {
    border-color: #8796b6; }
  .clrBrT hr {
    border-color: #3a4660; }
  .clrBrT .btn:hover,
  .clrBrT .btn:focus, .clrBrT.btn:hover, .clrBrT.btn:focus,
  .clrBrT .clrHover:hover,
  .clrBrT .clrHover:focus, .clrBrT.clrHover:hover, .clrBrT.clrHover:focus {
    border-color: #8796b6; }
    .disabled .clrBrT .btn:hover, .clrBrT .btn:hover.disabled, .clrBrT .btn:hover:disabled, .disabled
    .clrBrT .btn:focus,
    .clrBrT .btn:focus.disabled,
    .clrBrT .btn:focus:disabled, .disabled .clrBrT.btn:hover, .clrBrT.btn:hover.disabled, .clrBrT.btn:hover:disabled, .disabled .clrBrT.btn:focus, .clrBrT.btn:focus.disabled, .clrBrT.btn:focus:disabled, .disabled
    .clrBrT .clrHover:hover,
    .clrBrT .clrHover:hover.disabled,
    .clrBrT .clrHover:hover:disabled, .disabled
    .clrBrT .clrHover:focus,
    .clrBrT .clrHover:focus.disabled,
    .clrBrT .clrHover:focus:disabled, .disabled .clrBrT.clrHover:hover, .clrBrT.clrHover:hover.disabled, .clrBrT.clrHover:hover:disabled, .disabled .clrBrT.clrHover:focus, .clrBrT.clrHover:focus.disabled, .clrBrT.clrHover:focus:disabled {
      border-color: #3a4660; }

.clrBrDec1 {
  border-color: white;
  border-width: 2px;
  box-shadow: 0 0 3px rgba(0, 0, 0, 0.4); }

.clrBrEmph1 {
  border-color: #2aae24; }
  .clrBrEmph1 hr {
    border-color: #2aae24; }

.clrBrEmph2 {
  border-color: #60dd5a; }
  .clrBrEmph2 hr {
    border-color: #60dd5a; }

.clrBrError {
  border-color: red; }
  .clrBrError hr {
    border-color: red; }

.clrBrAlert2 {
  border-color: #e9831e; }

.clrBrInvis {
  /* generates the border color rules */
  border-color: transparent; }
  .clrBrInvis:hover, .clrBrInvis:focus {
    border-color: transparent; }
  .clrBrInvis input:focus:not(.disabled),
  .clrBrInvis select:focus:not(.disabled),
  .clrBrInvis textarea:focus:not(.disabled),
  .clrBrInvis button:focus:not(.disabled) {
    border-color: transparent; }
  .clrBrInvis hr {
    border-color: transparent; }
  .clrBrInvis .btn:hover,
  .clrBrInvis .btn:focus, .clrBrInvis.btn:hover, .clrBrInvis.btn:focus,
  .clrBrInvis .clrHover:hover,
  .clrBrInvis .clrHover:focus, .clrBrInvis.clrHover:hover, .clrBrInvis.clrHover:focus {
    border-color: transparent; }
    .disabled .clrBrInvis .btn:hover, .clrBrInvis .btn:hover.disabled, .clrBrInvis .btn:hover:disabled, .disabled
    .clrBrInvis .btn:focus,
    .clrBrInvis .btn:focus.disabled,
    .clrBrInvis .btn:focus:disabled, .disabled .clrBrInvis.btn:hover, .clrBrInvis.btn:hover.disabled, .clrBrInvis.btn:hover:disabled, .disabled .clrBrInvis.btn:focus, .clrBrInvis.btn:focus.disabled, .clrBrInvis.btn:focus:disabled, .disabled
    .clrBrInvis .clrHover:hover,
    .clrBrInvis .clrHover:hover.disabled,
    .clrBrInvis .clrHover:hover:disabled, .disabled
    .clrBrInvis .clrHover:focus,
    .clrBrInvis .clrHover:focus.disabled,
    .clrBrInvis .clrHover:focus:disabled, .disabled .clrBrInvis.clrHover:hover, .clrBrInvis.clrHover:hover.disabled, .clrBrInvis.clrHover:hover:disabled, .disabled .clrBrInvis.clrHover:focus, .clrBrInvis.clrHover:focus.disabled, .clrBrInvis.clrHover:focus:disabled {
      border-color: transparent; }

.clrBAtt1 {
  background-color: #2aae24; }

.clrBAtt2 {
  background-color: #60dd5a; }

.clrBAttGrad {
  background: linear-gradient(180deg, #60dd5a, #2aae24); }
  .clrBAttGrad.processing .spinner path:first-child {
    fill: #666; }

.clrBAlert2 {
  background: #fffaf6; }

.clrBAlert2Grad {
  background: linear-gradient(to top, #fffaf6, #fff4e9);
  background-color: #fffaf6; }

::-webkit-scrollbar-track {
  background: #f0f0f0; }

::-webkit-scrollbar-thumb {
  background: #dde1ea; }
  ::-webkit-scrollbar-thumb:hover {
    background: #f0f2f6; }
  ::-webkit-scrollbar-thumb:active {
    background: #f0f2f6; }

.clrBrBk {
  background-color: #dbdbdb; }

.clrTx1Br {
  border-color: #3a4660; }

.clrE1 {
  background-color: #2aae24; }

.clrO {
  background-color: rgba(240, 240, 240, 0.96); }

.clrSh1 {
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); }

.clrSh2 {
  box-shadow: 0 1px 0 rgba(0, 0, 0, 0.05); }

.clrSh3 {
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3); }

.required::after {
  color: red; }

#OBWEB .NavMenu .NavMenu-hamburgerIcon::after {
  background: black;
  box-shadow: 0 0.5em 0 0 black, 0 1.05em 0 0 black; }

#OBWEB .NavMenu .NavMenu-closeIcon {
  color: transparent;
  text-shadow: 0 0 0 black; }
